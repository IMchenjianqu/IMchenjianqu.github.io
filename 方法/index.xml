<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方法s on 数据与方法</title>
    <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/</link>
    <description>Recent content in 方法s on 数据与方法</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BioSonics使用（内业）</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/biosonics%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/biosonics%E4%BD%BF%E7%94%A8/</guid>
      <description>通过声纳侧扫方法，获取水下物体（植被）的株高覆盖度参数，内业处理方法
 在外业的VisualAcquisition中获取的数据导入VisualHabitat中：
设置参数（分贝等），对数据进行人工识别：
导出csv及kml类型数据
在谷歌地球中打开kml，kml的属性即为株高等参数</description>
    </item>
    
    <item>
      <title>买入及卖出</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E4%B9%B0%E5%85%A5%E5%8F%8A%E5%8D%96%E5%87%BA/</link>
      <pubDate>Mon, 09 Aug 2021 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E4%B9%B0%E5%85%A5%E5%8F%8A%E5%8D%96%E5%87%BA/</guid>
      <description>探讨股票等产品的买入卖出时间段及选择，以达盈利目的
 买入卖出时间段 1.根据市场变动的信号（类似量化交易），选择买入卖出时间，在概率、数学期望层面上获胜
例 北向资金的变化，导致市场变动
通过爬虫在tushare、香港交易所、东方财经网等财经资讯网站爬取流入上、深交易所资金量、此后几天开盘及收盘总价，进行整理后得出
因此，结合其他一些信号，运用知网上相关机器学习应用在交易上的论文方法，提高概率增加赢钱的数学期望，选择合适时间买入卖出
免费获取市场信息，但是有积分门槛 https://tushare.pro/
买入板块 作为散户，最可靠的信息来源就是国家发布的消息，在国家统计局、发改委、海关总署、人民银行等网站查找今年或某段时间的热门板块（例，国家统计局可以看CPI、PPI等，每周两更）
传送门 http://www.pbc.gov.cn/ http://www.customs.gov.cn/ https://www.ndrc.gov.cn/?code=&amp;amp;state=123 http://www.stats.gov.cn/
 基金 由于股票过于昂贵，而基金则较为便宜。另一方面，基金作为股票的组合，只需以相同方法分析基金，并多了解基金公司、经理，多考虑则可同理购买售卖。
 实践 由于时间、资金问题，我的策略是尽早选择某段时间热门板块，然后持有某些基金一段较长的时间
 待续 还需进行更多实验</description>
    </item>
    
    <item>
      <title>raspberry pi部署</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/raspberry_pi/</link>
      <pubDate>Tue, 13 Jul 2021 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/raspberry_pi/</guid>
      <description>树莓派（raspberry pi）作为微电脑，大小如同卡片，但“五脏俱全”，常见的树莓派项目有魔镜、NAS、机器人等。可运行Linux等系统，趁毕业之际，捡了一块，对其进行简单部署，可用于各种实际需求。
部分项目网站 https://shumeipai.nxez.com/ https://www.douban.com/note/609506167/
 001.系统部署 1.TF卡烧制 通过imager_1.5.exe，读卡器等工具，将想要的系统烧制至TF卡中
 2.通过插入外设部署 插入显示器、键鼠等外设进行部署
 3.通过ssh方式部署 通过读卡器，在电脑中打开制作的TF卡，在根目录找到cmdline，打开，添加任意IP，例如ip=192.168.137.100
在网络适配器中，将默认英特网以外的网络进行禁用，对默认英特网连接进行属性设置，禁用ipv6，将ip地址改为，如192.168.137.101
通过网线将插入TF卡的树莓派与电脑相连
win R，打开cmd，输入ipconfig查看本机ip，应为修改后的192.168.137.101，ping树莓派，成功后打开putty进行设置
输入树莓派IP，默认账号密码为：pi，raspberry，进入shell后（linux），输入sudo su，获取管理员权限，设置部署VNC
通过VNC打开树莓派的图形界面，进行设置
 4.关机 使用shutdown
 注 硬件材料：树莓派（3B、3B+、4B），tf卡，读卡器，电脑，网线，键鼠，电源线等
软件材料：以下链接中提供tf卡烧制，VNC等工具，以及树莓派官方系统
复制这段内容后打开百度网盘手机App，操作更方便哦 链接：https://pan.baidu.com/s/1hITl62ZoXQA0LmiFugDEYw 提取码：m5wv</description>
    </item>
    
    <item>
      <title>SVM、XGBoost及其融合模型（voting）在分类上的效果</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/svmxgboost%E5%8F%8A%E5%85%B6%E8%9E%8D%E5%90%88%E6%A8%A1%E5%9E%8Bvoting%E5%9C%A8%E5%88%86%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%95%88%E6%9E%9C/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/svmxgboost%E5%8F%8A%E5%85%B6%E8%9E%8D%E5%90%88%E6%A8%A1%E5%9E%8Bvoting%E5%9C%A8%E5%88%86%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%95%88%E6%9E%9C/</guid>
      <description>1.将光谱数据通过单因素方差分析后，选取P值较小（差异显著）的参数，每种藻选择前20个，一共三种藻，添加随机数random，打乱顺序 2.简单计算每个参数间的相关性，进行观察 3.计算两种模型的预测结果（左），计算两种模型通过voting算法融合的预测结果（右） 4.模型融合后，准确率显著提高
注 python代码如下：
# 数据处理 import numpy as np import pandas as pd # 可视化 import matplotlib.pyplot as plt import seaborn as sns # 机器学习 from sklearn.preprocessing import LabelEncoder from sklearn.preprocessing import StandardScaler from sklearn.metrics import accuracy_score from sklearn.model_selection import cross_val_score from sklearn.model_selection import KFold from sklearn.model_selection import GridSearchCV from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.neighbors import KNeighborsClassifier from sklearn.svm import SVC from sklearn.tree import DecisionTreeClassifier from sklearn.</description>
    </item>
    
    <item>
      <title>灰度共生矩阵（GLCM）进行生物量回归</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E7%81%B0%E5%BA%A6%E5%85%B1%E7%94%9F%E7%9F%A9%E9%98%B5glcm%E8%BF%9B%E8%A1%8C%E7%94%9F%E7%89%A9%E9%87%8F%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E7%81%B0%E5%BA%A6%E5%85%B1%E7%94%9F%E7%9F%A9%E9%98%B5glcm%E8%BF%9B%E8%A1%8C%E7%94%9F%E7%89%A9%E9%87%8F%E5%9B%9E%E5%BD%92/</guid>
      <description>1.通过matlab选择不同滑动窗口，获得灰度共生矩阵，并求得常用的一些参数，如熵，能量，同质性等（11张照片，每张照片4个特征参数） 2.通过python建模（Random Forest）进行简单回归，得到预测生物量及R方 注： matlab主要应用graycomatrix及graycoprops
RF代码如下
import pandas as pd import numpy as np from sklearn.model_selection import train_test_split import matplotlib.pyplot as plt #from sklearn import metrics from sklearn.metrics import r2_score from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import GridSearchCV seaweed_data = pd.read_csv(r&amp;#39;F:\biomass_feature.csv&amp;#39;, error_bad_lines=False) X = seaweed_data.drop([&amp;#34;biomass&amp;#34;], axis=1) y = seaweed_data[&amp;#34;biomass&amp;#34;] x_train, x_test, y_train, y_test = train_test_split(X, y, random_state=0) param_grid = { &amp;#39;n_estimators&amp;#39;: [5, 10, 20, 50, 100, 200],#决策树个数 &amp;#39;max_depth&amp;#39;: [3, 5, 7, 9],#最大树深 &amp;#39;max_features&amp;#39;: [0.</description>
    </item>
    
    <item>
      <title>坐标格式间批量转换</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E5%9D%90%E6%A0%87%E6%A0%BC%E5%BC%8F%E9%97%B4%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E5%9D%90%E6%A0%87%E6%A0%BC%E5%BC%8F%E9%97%B4%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2/</guid>
      <description>通过百度坐标拾取、谷歌地球添加地标或其他方式获取的坐标点的格式不同（XXX.XXX°与XXX°XXX′XXX″），使用时需要转换，云端转换常常无法做到批量处理
 通过excel对坐标点进行批量转换
left与find函数截取“度”的数值
mid与find函数截取“分”的值并除以60
mid与find函数截取“秒”的值并除以3600
由于通过mid函数只能获取指定范围的切片，当实际切片与获得切片不符时，转换结果会出错
为得到更准确的结果，需要对特定位置进行修改，如上图，需要将“2”改为“4”（获取20.9），转换结果正确
转换为原始状态较为简单，只需使用text函数即可</description>
    </item>
    
    <item>
      <title>钢筋承力计算（悬臂梁）</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E9%92%A2%E7%AD%8B%E6%89%BF%E5%8A%9B%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E9%92%A2%E7%AD%8B%E6%89%BF%E5%8A%9B%E8%AE%A1%E7%AE%97/</guid>
      <description>1.分析结构，得到结构简图；进行受力分析，得到受力分析图；计算弯矩，得到弯矩图
2.计算物体所承受的弯矩
3.计算钢筋混凝土所能提供的弯矩
4.比较两者大小</description>
    </item>
    
    <item>
      <title>投票刷票器</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E6%8A%95%E7%A5%A8%E5%88%B7%E7%A5%A8%E5%99%A8/</link>
      <pubDate>Wed, 20 Jan 2021 20:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E6%8A%95%E7%A5%A8%E5%88%B7%E7%A5%A8%E5%99%A8/</guid>
      <description>投票刷票器，python，HTML
通过管理者工具，抓包查看post文件，获取投票服务器地址、投票人ID、协议头、动态参数位置
import urllib2,cookielib def vote(id=...%目标人员在服务器的ID); cookie = cookielib.CookieJar()%创建cookie对象 opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))%创建打开对象 urllib2.install_opener(opener)%将opener对象安装到全局 req = urllib2.Request(url=&amp;#39;http...&amp;#39;%当前网址url) html = urllib2.urlopen(req).read() a = html.find(&amp;#39;value=&amp;#34;&amp;#39;)%查找动态参数，亦可通过正则表达式获取 b = html.find(&amp;#39;&amp;#34;&amp;#39;,a+len(&amp;#39;value=&amp;#34;&amp;#39;)) token = html[a+len(&amp;#39;value=&amp;#34;&amp;#39;):b]%通过切片，获取动态参数 req = urllib2.Request(url=&amp;#39;http...&amp;#39;%投票服务器 data=&amp;#39;__RequestVerificationToken=%s&amp;amp;Chioce=%s&amp;amp;X...&amp;#39;)%输入动态参数与ID req.add_header(&amp;#34;User-Agent&amp;#34;,&amp;#34;...&amp;#34;)%协议头 req.add_header(&amp;#39;Referer&amp;#39;,&amp;#34;http...&amp;#34;)%投票服务器 html = urllib2.urlopen(req).read() for i in xrange(1000):%投1000票 vote() print(i) 可import threading模块进行多线程，提高投票速度
可同时投多人</description>
    </item>
    
    <item>
      <title>科学上网</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Tue, 22 Dec 2020 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>最直接方式是，购买一台境外服务器，网上搜索资料，搭建梯子（服务器记得删除云镜，否则搭建成功后依旧无法访问访问你想要访问的网页），通过SSH即可使电脑和手机一起科学上网。但另一方面，这个开销巨大，即便购买域名来搭建自己网站，这同样是得不偿失。
 手机端 IPhone用户可通过app store登陆国外账户（美服：ID：milefenxiang@aliyun.com，密码：Ah336611,千万不能在app store意外的地方登陆，否则手机可能变砖） 然后下载小火箭，配置：类型选择&amp;quot;subscribe&amp;quot;，Method选择“salsa20” 更新&amp;mdash;连通性检查&amp;mdash;选择网速快的节点即可网上冲浪
 电脑端 使用谷歌插件HOXX（不知现在版本是否还可行，我自己一直不更新，用旧版本可免费） 登陆邮箱同步</description>
    </item>
    
    <item>
      <title>SVM实现（python）</title>
      <link>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/svm/</link>
      <pubDate>Sat, 12 Dec 2020 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/%E6%96%B9%E6%B3%95/svm/</guid>
      <description>通过python实现支持向量机实现——以高光谱数据为例
准备测试集数据后，运行训练模型，获得文件out_test_y.txt；准备训练集数据运行，训练函数，获得文件out_y_pred.txt。两文本文件中有对应的数据及分类号，通过对比，直观体现精度 通过运行Data Prepare准备训练集集数据
import pandas as pd import numpy as np import os import joblib def file_name(file_dir): #读取当前文件下的所有文件 for root, dirs, files in os.walk(file_dir): # print(root) #当前目录路径 # print(dirs) #当前路径下所有子目录 return files #当前路径下所有非目录子文件 def Data_prepare_non(label):#输入的是你的探测器的编号，非归一化。 file_list = file_name(&amp;#39;./data/&amp;#39;+label) print(file_list) hstack_list = [] for i in file_list: data = pd.read_excel(&amp;#39;./data/&amp;#39;+label+&amp;#39;/&amp;#39;+i) # max_min_scaler = lambda x : (x-np.min(x))/(np.max(x)-np.min(x))#归一化到（0，1）之间的函数 data_column = list(data.columns)#获取exexl中各个列名 hstack_list.append(np.array(data[[data_column[1]]]).reshape(1,-1)) x = hstack_list[0] for i in range(1,len(file_list)): x = np.</description>
    </item>
    
  </channel>
</rss>
