<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>海藻 博客</title>
    <link>https://IMchenjianqu.github.io/</link>
    <description>Recent content on 海藻 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 12 Dec 2020 14:46:53 +0800</lastBuildDate><atom:link href="https://IMchenjianqu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SVM实现（python）</title>
      <link>https://IMchenjianqu.github.io/posts/svm/</link>
      <pubDate>Sat, 12 Dec 2020 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/svm/</guid>
      <description>通过python实现支持向量机实现——以高光谱数据为例 准备测试集数据后，运行训练模型，获得文件{{ out_test_y.txt }}；准备训练集数据运行，训练函数，获得文件{{ out_y_pred.txt }}。两文本文件中有对应的数据及分类号，通过对比，直观体现精度  通过运行{{ Data Prepare }}准备训练集集数据
import pandas as pd import numpy as np import os import joblib def file_name(file_dir): #读取当前文件下的所有文件 for root, dirs, files in os.walk(file_dir): # print(root) #当前目录路径 # print(dirs) #当前路径下所有子目录 return files #当前路径下所有非目录子文件 def Data_prepare_non(label):#输入的是你的探测器的编号，非归一化。 file_list = file_name(&amp;#39;./data/&amp;#39;+label) print(file_list) hstack_list = [] for i in file_list: data = pd.read_excel(&amp;#39;./data/&amp;#39;+label+&amp;#39;/&amp;#39;+i) # max_min_scaler = lambda x : (x-np.min(x))/(np.max(x)-np.min(x))#归一化到（0，1）之间的函数 data_column = list(data.columns)#获取exexl中各个列名 hstack_list.append(np.array(data[[data_column[1]]]).reshape(1,-1)) x = hstack_list[0] for i in range(1,len(file_list)): x = np.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://IMchenjianqu.github.io/posts/test/</link>
      <pubDate>Sat, 12 Dec 2020 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/test/</guid>
      <description>test-local test1 test2 test3</description>
    </item>
    
    <item>
      <title>介绍</title>
      <link>https://IMchenjianqu.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/creating-a-new-theme/</guid>
      <description>介绍 This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>菜谱</title>
      <link>https://IMchenjianqu.github.io/posts/test-copy/</link>
      <pubDate>Wed, 12 Aug 2020 14:46:53 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/test-copy/</guid>
      <description>为了方便自己看各种原料的用量及基本步骤，收集一些简化版的菜谱在此
 B  1.白斩鸡 2.包菜 3.布丁 </description>
    </item>
    
    <item>
      <title>The &#34;figure&#34; Shortcode</title>
      <link>https://IMchenjianqu.github.io/posts/the-figure-shortcode/</link>
      <pubDate>Mon, 24 Dec 2018 12:29:41 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/the-figure-shortcode/</guid>
      <description>Hugo has figure shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:
https://gohugo.io/content-management/shortcodes/#figure
This theme has 3 CSS classes made for figure elements:
 big: images will break the width limit of main content area. left: images will float to the left. right: images will float to the right.  If a figure has no class set, the image will behave just like a normal markdown image: !</description>
    </item>
    
    <item>
      <title>Post With Featured Image</title>
      <link>https://IMchenjianqu.github.io/posts/post-with-featured-image/</link>
      <pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/post-with-featured-image/</guid>
      <description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:- https://picsum.photos/1024/768/?random---This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
    </item>
    
    <item>
      <title>Typography</title>
      <link>https://IMchenjianqu.github.io/posts/typography/</link>
      <pubDate>Sat, 29 Sep 2018 11:36:33 +0800</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/typography/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 An apple is a sweet, edible fruit produced by an apple tree (Malus pumila).</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://IMchenjianqu.github.io/about-hugo/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/about-hugo/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://IMchenjianqu.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://IMchenjianqu.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://IMchenjianqu.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
